[
    {
        "keys": ["ctrl+shift+w"],
        "command": "toggle_setting",
        "args": {
            "setting": "word_wrap"
        }
    },
    { "keys": ["alt+up"], "command": "swap_line_up" },
    { "keys": ["alt+down"], "command": "swap_line_down" },
    { "keys": ["ctrl+alt+u"], "command": "duplicate_line" },
    { "keys": ["ctrl+shift+s"], "command": "save_all" },
    { "keys": ["ctrl+d"], "command": "run_macro_file", "args": {"file": "res://Packages/Default/Delete Line.sublime-macro"} },

    { "keys": ["ctrl+q"], "command": "markdown_quote", "context": [ { "key": "selector", "operator": "equal", "operand": "text.html.markdown" } ] },
    { "keys": ["ctrl+b"], "command": "markdown_bold", "context": [ { "key": "selector", "operator": "equal", "operand": "text.html.markdown" } ] },
    { "keys": ["ctrl+l"], "command": "markdown_add_link", "context": [ { "key": "selector", "operator": "equal", "operand": "text.html.markdown" } ] },
    { "keys": ["ctrl+k"], "command": "markdown_code", "context": [ { "key": "selector", "operator": "equal", "operand": "text.html.markdown" } ] },
    { "keys": ["ctrl+shift+k"], "command": "markdown_code_block", "context": [ { "key": "selector", "operator": "equal", "operand": "text.html.markdown" } ] },
    { "keys": ["ctrl+shift+l"], "command": "markdown_list", "context": [ { "key": "selector", "operator": "equal", "operand": "text.html.markdown" } ] },
    { "keys": ["ctrl+shift+o"], "command": "markdown_ordered_list", "context": [ { "key": "selector", "operator": "equal", "operand": "text.html.markdown" } ] },
    { "keys": ["ctrl+i"], "command": "markdown_italic", "context": [ { "key": "selector", "operator": "equal", "operand": "text.html.markdown" } ] },

    { "keys": ["ctrl+7"], "command": "toggle_comment", "args": { "block": false } },

    // auto-pair dot
    { "keys": ["."], "command": "insert_snippet", "args": {"contents": ".$0."}, "context":
        [
            { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
            { "key": "selection_empty", "operator": "equal", "operand": false, "match_all": false },
            { "key": "following_text", "operator": "regex_contains", "operand": "^(?:\t| |\\)|]|\\}|>|$)", "match_all": true },
            { "key": "preceding_text", "operator": "not_regex_contains", "operand": "[.a-zA-Z0-9_]$", "match_all": true },
            { "key": "eol_selector", "operator": "not_equal", "operand": "string.quoted.single - punctuation.definition.string.end", "match_all": true }
        ]
    },
    { "keys": ["."], "command": "insert_snippet", "args": {"contents": ".${0:$SELECTION}."}, "context":
        [
            { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
            { "key": "selection_empty", "operator": "equal", "operand": false, "match_all": false }
        ]
    },
    { "keys": ["."], "command": "move", "args": {"by": "characters", "forward": true}, "context":
        [
            { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
            { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
            { "key": "following_text", "operator": "regex_contains", "operand": "^\\.", "match_all": true },
            { "key": "selector", "operator": "not_equal", "operand": "punctuation.definition.string.begin", "match_all": true },
            { "key": "eol_selector", "operator": "not_equal", "operand": "string.quoted.single - punctuation.definition.string.end", "match_all": true },
        ]
    },
    { "keys": ["backspace"], "command": "run_macro_file", "args": {"file": "res://Packages/Default/Delete Left Right.sublime-macro"}, "context":
        [
            { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
            { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
            { "key": "preceding_text", "operator": "regex_contains", "operand": "\\.$", "match_all": true },
            { "key": "following_text", "operator": "regex_contains", "operand": "^\\.", "match_all": true },
            { "key": "selector", "operator": "not_equal", "operand": "punctuation.definition.string.begin", "match_all": true },
            { "key": "eol_selector", "operator": "not_equal", "operand": "string.quoted.single - punctuation.definition.string.end", "match_all": true },
        ]
    },

 ]